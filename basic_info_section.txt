        {/* Basic Information - moved to bottom for better AI autofill UX */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üìù Basic Information</Text>
          
          <View style={styles.inputGroup}>
            <View style={styles.inputLabelRow}>
              <Text style={styles.inputLabel}>Title *</Text>
              {!formData.title.trim() && !isGeneratingAutofill && (
                <TouchableOpacity 
                  style={styles.autofillButton}
                  onPress={generateAutofillSuggestions}
                  disabled={feedData.feeds.length === 0 && selectedAETCategories.length === 0}
                >
                  <Text style={styles.autofillIcon}>‚ú®</Text>
                  <Text style={styles.autofillButtonText}>AI Autofill</Text>
                </TouchableOpacity>
              )}
              {isGeneratingAutofill && (
                <View style={styles.generatingIndicator}>
                  <ActivityIndicator size="small" color="#007AFF" />
                  <Text style={styles.generatingText}>Generating...</Text>
                </View>
              )}
            </View>
            <TextInput
              style={styles.textInput}
              value={formData.title}
              onChangeText={(text) => setFormData(prev => ({ ...prev, title: text }))}
              placeholder="What activity did you do?"
              autoCapitalize="words"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>Description *</Text>
            <TextInput
              style={[styles.textInput, styles.textArea]}
              value={formData.description}
              onChangeText={(text) => setFormData(prev => ({ ...prev, description: text }))}
              placeholder="Describe what you did, how you did it, and what you learned..."
              multiline
              numberOfLines={4}
            />
          </View>

          {/* Autofill suggestions */}
          {showAutofillPrompt && autofillSuggestions && (
            <View style={styles.autofillPrompt}>
              <View style={styles.autofillPromptHeader}>
                <Text style={styles.autofillPromptTitle}>‚ú® AI Suggestions Ready</Text>
                <TouchableOpacity 
                  style={styles.autofillDismissButton}
                  onPress={() => setShowAutofillPrompt(false)}
                >
                  <Text style={styles.autofillDismissText}>‚úï</Text>
                </TouchableOpacity>
              </View>
              
              <Text style={styles.autofillPreviewLabel}>Suggested Title:</Text>
              <Text style={styles.autofillPreviewText}>{autofillSuggestions.title}</Text>
              
              <Text style={styles.autofillPreviewLabel}>Suggested Description:</Text>
              <Text style={styles.autofillPreviewText} numberOfLines={3}>
                {autofillSuggestions.description}
              </Text>
              
              <View style={styles.autofillPromptActions}>
                <TouchableOpacity 
                  style={styles.autofillKeepManualButton}
                  onPress={() => setShowAutofillPrompt(false)}
                >
                  <Text style={styles.autofillKeepManualText}>Keep Manual</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  style={styles.autofillUseButton}
                  onPress={applyAutofillSuggestions}
                >
                  <Text style={styles.autofillUseText}>‚ú® Use AI Suggestions</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}

          {/* Context & Environment */}
          <View style={styles.contextSection}>
            <Text style={styles.contextSectionTitle}>üìç Context & Environment</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Date *</Text>
              <DatePicker
                value={formData.date}
                onChange={(date) => setFormData(prev => ({ ...prev, date }))}
              />
            </View>
            
            <View style={styles.autoDetectContainer}>
              <Text style={styles.autoDetectLabel}>Weather & Location</Text>
              <TouchableOpacity
                style={[
                  styles.autoDetectButton,
                  useLocationWeather && styles.autoDetectButtonActive,
                  (weatherLoading || locationLoading) && styles.autoDetectButtonLoading
                ]}
                onPress={() => {
                  const newValue = !useLocationWeather;
                  setUseLocationWeather(newValue);
                  if (newValue) getLocationWeather();
                }}
                disabled={weatherLoading || locationLoading}
              >
                {(weatherLoading || locationLoading) ? (
                  <ActivityIndicator size="small" color="#FFF" />
                ) : (
                  <>
                    <Text style={styles.autoDetectIcon}>üìç</Text>
                    <Text style={[
                      styles.autoDetectText,
                      useLocationWeather && styles.autoDetectTextActive
                    ]}>
                      {useLocationWeather ? 'Auto' : 'Manual'}
                    </Text>
                  </>
                )}
              </TouchableOpacity>
            </View>
            
            {(weatherLoading || locationLoading) && (
              <View style={styles.loadingIndicator}>
                <ActivityIndicator size="small" color="#007AFF" />
                <Text style={styles.loadingText}>
                  {locationLoading ? 'Getting location...' : 'Fetching weather...'}
                </Text>
              </View>
            )}
            
            <View style={styles.contextInputsContainer}>
              <View style={styles.contextInputWrapper}>
                <Text style={styles.contextInputLabel}>Weather</Text>
                <TextInput
                  style={[
                    styles.contextInput,
                    (weatherLoading || locationLoading) && styles.contextInputDisabled
                  ]}
                  value={formData.weather}
                  onChangeText={(text) => setFormData(prev => ({ ...prev, weather: text }))}
                  placeholder="Clear, 72¬∞F"
                  editable={!useLocationWeather && !weatherLoading && !locationLoading}
                  placeholderTextColor="#999"
                />
              </View>
              
              <View style={styles.contextInputWrapper}>
                <Text style={styles.contextInputLabel}>Location</Text>
                <TextInput
                  style={[
                    styles.contextInput,
                    (weatherLoading || locationLoading) && styles.contextInputDisabled
                  ]}
                  value={formData.location}
                  onChangeText={(text) => setFormData(prev => ({ ...prev, location: text }))}
                  placeholder="Farm, barn, pasture..."
                  editable={!useLocationWeather && !weatherLoading && !locationLoading}
                  placeholderTextColor="#999"
                />
              </View>
            </View>
          </View>
        </View>